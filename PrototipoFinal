#include <iostream>
#include <conio.h>
#include <windows.h>
#include <string>
#include <cctype>
#include <fstream>
#include <limits>

using namespace std;

struct paciente{
    string nombre;
    int DNI;
    int edad;
    string sexo;
    int gravedad;
};

paciente camaGeneral[50];
paciente camaUCIN[30];
paciente camaUCI[20];

int contGeneral=0,contUCIN=0,contUCI=0;
void bannerInicio();
void ingresoMedico();
void ingresoPaciente();
void menu();
void mostrarPacientes();
void gotoxy(int,int) ;
void mostrarCursor(bool );
void guardarPacientes();
void cargarPacientes();
void borrarPaciente();
bool borrarDe(paciente* , int &, int );
void guardarGrupo(ofstream &, paciente *, int );
string leerLinea(const string& );
bool validarDNI(int );
int leerEntero(const string& , int , int ,int,int);
void cambio_color(int x){
  SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),x);
}



int main(){
    bannerInicio();
    ingresoMedico();
    cargarPacientes();
    menu();
    return 0;
}

void bannerInicio() {
    system("cls");
    string titulo = "SISTEMA DE GESTION HOSPITALARIA";
    string subtitulo = "    Hospital Nacional";
    
    cambio_color(11);
    gotoxy(25, 5);
    cout << char(201);
    for (int i = 0; i < 40; i++) cout << char(205);
    cout << char(187);

    for (int i = 6; i <= 11; i++) {
        gotoxy(25, i); cout << char(186);
        gotoxy(66, i); cout << char(186);
    }

    gotoxy(25, 12);
    cout << char(200);
    for (int i = 0; i < 40; i++) cout << char(205);
    cout << char(188);

    // Animación tipo máquina de escribir
    cambio_color(14);
    gotoxy(30, 7);
    for (char c : titulo) {
        cout << c;
        Sleep(80);
    }

    cambio_color(14);
    gotoxy(33, 9);
    for (char c : subtitulo) {
        cout << c;
        Sleep(50);
    }

    cambio_color(7);
    gotoxy(35, 11);
    cout << "Cargando sistema";
    for (int i = 0; i < 3; i++) {
        cout << ".";
        Sleep(700);
    }
    Sleep(600);

    system("cls");
    cambio_color(15);
}

string clavesita(){
  string contra;
  char caractersito;
  while(true){
         caractersito=getch();
         if(caractersito==13){
    break;
         }       
         else if(caractersito==8){
    if(!contra.empty()){//evalua si la cadena esta vacia
      contra.pop_back();//elimina el ultimo caracter
      cout << "\b \b";//retrocede
    }
         }
         else{
    contra.push_back(caractersito);
    cout << "*";
         }
  }
  return contra;
}
void ingresoMedico(){
    int contador=0;
    string codigo="1", contra="2";
    string ingreso_codigo, ingreso_contra;

    do{
        gotoxy(35,5);cout<<"INGRESE CODIGO MEDICO: "; 
		getline(cin, ingreso_codigo);
		
        gotoxy(35,7);cout<<"INGRESE CONTRASENA: "; 
            ingreso_contra=clavesita();
        
        if(ingreso_codigo==codigo && ingreso_contra==contra){
        	return; 
        }
        else{
            contador++;
            gotoxy(35,9); cout<<"CREDENCIALES INCORRECTAS. Intentos: "<<contador<<"/3";
            getch();
            system("cls");
        } 
    }while(contador<3);

    gotoxy(35,11); cout << "ACCESO DENEGADO. Cerrando programa...";
    Sleep(1000);
    system("cls");
    exit(1);
}

void ingresoPaciente(){
    system("cls");
	paciente nuevo;
    int dni;

	for(int i=30; i<=90; i++){   
        gotoxy(i,2); cout << char(205);
         gotoxy(i,15); cout << char(205); }
         
    for(int j=2; j<=15; j++){   
        gotoxy(30,j); cout << char(186);
        gotoxy(90,j); cout << char(186);  }
	
        gotoxy(30,2); cout << char(201);  
        gotoxy(90,2); cout << char(187);  
        gotoxy(30,15); cout << char(200); 
        gotoxy(90,15); cout << char(188); 
	

    gotoxy(35,3);cout << "INGRESO DEL PACIENTE";
    //NOMBRE
    gotoxy(35,5);nuevo.nombre = leerLinea("Ingrese su nombre: ");

    //DNI
    do{ 
        gotoxy(35,6);cout<<"                                        ";//esto es para limpiar la linea
        dni=leerEntero("DNI: ", 10000000, 99999999,35,6);//los 2 ultimos numeros son columna y fila respectivamente
        
    }while(validarDNI(dni)==false);//false.. hay un dni igual
    nuevo.DNI =dni;

    //EDAD
    nuevo.edad = leerEntero("Edad: ", 1, 120,35,7);

    //SEXO

    do{ 
        gotoxy(35,8);cout<<"                                        ";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        gotoxy(35,8);cout <<"Sexo(M/F): "; cin >> nuevo.sexo;

    }while (cin.fail() || 
        (nuevo.sexo != "M" && nuevo.sexo != "F" && 
         nuevo.sexo != "m" && nuevo.sexo != "f"));
    

    //GRAVEDAD
	nuevo.gravedad = leerEntero("Nivel de gravedad [1-General | 2-UCIN | 3-UCI]: ", 1, 3,35,9);

    
	switch(nuevo.gravedad){
        case 1:
            if(contGeneral < 50) {   
            camaGeneral[contGeneral] = nuevo;
            contGeneral++;
            gotoxy(35,13);cout << "Paciente guardado en cama General.";
            } else {
            gotoxy(35,13);cout << "No hay espacio en cama General.";
            }
        break;
        case 2:
            if (contUCIN < 30){
            camaUCIN[contUCIN] = nuevo;
            contUCIN++;
            gotoxy(35,13);cout << "Paciente guardado en cama UCIN.";
            }
		    else{
            gotoxy(35,13);cout <<"No hay espacio en cama UCIN.";
             }
        break;
        case 3:
            if(contUCI < 20) {
            camaUCI[contUCI] = nuevo;
            contUCI++;
            gotoxy(35,13);cout << "Paciente guardado en cama UCI.";
            } else{
            gotoxy(35,13);cout << "No hay espacio en cama UCI.";
              }
        break;
    }
    guardarPacientes(); // Guarda automáticamente después de agregar
    getch();
}
bool validarDNI(int dni){
    
    for(int i=0;i<contGeneral;i++){
        if(dni==camaGeneral[i].DNI){
            gotoxy(35,6);cout<<"Este DNI ya ha sido registrado";
            getch();
            return false;
        }
    }
    for(int i=0;i<contUCIN;i++){
        if(dni==camaUCIN[i].DNI){
            gotoxy(35,6);cout<<"Este DNI ya ha sido registrado";
            getch();
            return false;
        }
    } 
    for(int i=0;i<contUCI;i++){
        if(dni==camaUCI[i].DNI){
            gotoxy(35,6);cout<<"Este DNI ya ha sido registrado";
            getch();
            return false;
        }
    } 
    return true;

}

string leerLinea(const string& mensaje) {
    string texto;
    cout << mensaje;
    getline(cin >> ws, texto); // limpia espacios, luego lee la línea
    return texto;
}
void menu(){
    mostrarCursor(false);
    system("cls");
    string opciones[4] = {"INGRESAR PACIENTE", "MOSTRAR PACIENTES","BORRAR PACIENTE", "SALIR"};
    int posX = 40, posY = 5, seleccion=0, cant_opciones=4;
    int anterior;//guarda la pos de seleccion
    bool bandera = true;

    // Dibujo el menu principal, todas en blanco
    for(int i=0;i<cant_opciones;i++){
        gotoxy(posX, posY + (i*2));
        cambio_color(15);
        cout << opciones[i];
    }

    // Voy a pintar la primera, osea por defecto estará selecionada
    gotoxy(posX, posY);
    cambio_color(9);
    cout << opciones[0];


    while(bandera){

        if(kbhit()){
            
            char tecla = getch();//es para que no se muestre la tecla
            anterior = seleccion;

            if(tecla == 72) //Flecha arriba
                seleccion = (seleccion - 1 + cant_opciones)% cant_opciones;
            if(tecla == 80) //Flecha abajo
                seleccion = (seleccion + 1)% cant_opciones;
            
            if(tecla ==13){
                system("cls");
                bandera=false;
                cambio_color(15);
                mostrarCursor(true);

                switch(seleccion){

                    case 0 : ingresoPaciente();break;
                    case 1 : mostrarPacientes(); break;
                    case 2: borrarPaciente(); break;
                    case 3: exit(1);
                }

                menu();//para que vuelva al menu luego de mostrar lo q sea
            }

            // Restaurar color de la opción anterior
            gotoxy(posX, posY + (anterior*2));
            cambio_color(15);
            cout << opciones[anterior];

            // Pintar color de la nueva opción seleccionada
            gotoxy(posX, posY + (seleccion*2));
            cambio_color(9);
            cout << opciones[seleccion];


        }

    }
}
void mostrarPacientes() {
    int grupo = 0; // 0 = General, 1 = UCIN, 2 = UCI
    int inicio = 0; // índice de inicio para mostrar
    const int porPagina = 10;
    char tecla;

    while (true) {
        system("cls");
        string nombreGrupo;
        paciente* arr;
        int cantidad;

        // Seleccionar grupo según el valor de 'grupo'
        switch (grupo) {
            case 0: arr = camaGeneral; cantidad = contGeneral; nombreGrupo = "CAMA GENERAL"; break;
            case 1: arr = camaUCIN; cantidad = contUCIN; nombreGrupo = "UCIN"; break;
            case 2: arr = camaUCI; cantidad = contUCI; nombreGrupo = "UCI"; break;
        }

        gotoxy(5,2); cout << "LISTA DE PACIENTES - " << nombreGrupo;
        gotoxy(5,3); cout << "--------------------------------------------------------------";
        gotoxy(5,4); cout << "NOMBRE";
        gotoxy(37,4);cout << "DNI";
        gotoxy(49,4);cout << "EDAD";
        gotoxy(56,4);cout << "SEXO";
        gotoxy(5,5); cout << "--------------------------------------------------------------";

        if (cantidad == 0) {
            gotoxy(5,7); cout << "No hay pacientes en este grupo.";
        } else {
            int fin = min(inicio + porPagina, cantidad);
            int fila = 6;
            for (int i = inicio; i < fin; i++) {
                gotoxy(5, fila + (i - inicio));  cout << arr[i].nombre;
                gotoxy(35, fila + (i - inicio)); cout << arr[i].DNI;
                gotoxy(50, fila + (i - inicio)); cout << arr[i].edad;
                gotoxy(58, fila + (i - inicio)); cout << arr[i].sexo;
            }
        }

        gotoxy(5,20);
        cout << "[↑/↓] Desplazar  [←/→] Cambiar grupo  [B] Volver";

        tecla = getch();

        // Navegación dentro del grupo
        if (tecla == 72 && inicio > 0) { // ↑
            inicio--;
        } 
        else if (tecla == 80 && inicio + porPagina < cantidad) { // ↓
            inicio++;
        } 
        // Cambiar grupo
        else if (tecla == 75) { // ←
            grupo = (grupo - 1 + 3) % 3;
            inicio = 0;
        } 
        else if (tecla == 77) { // →
            grupo = (grupo + 1) % 3;
            inicio = 0;
        } 
        // Salir
        else if (tolower(tecla) == 'b') {
            break;
        }
    }
}


// Guarda todos los pacientes en un archivo de texto
void guardarPacientes() {
    ofstream archivo("pacientes.txt");
    if (!archivo) {
        cout << "Error al abrir el archivo para guardar." << endl;
        return;
    }

    archivo << contGeneral << " " << contUCIN << " " << contUCI << "\n";

    guardarGrupo(archivo, camaGeneral, contGeneral);
    guardarGrupo(archivo, camaUCIN, contUCIN);
    guardarGrupo(archivo, camaUCI, contUCI);
    
    archivo.close();
}

void guardarGrupo(ofstream &arch, paciente *arr, int cantidad) {
    for (int i = 0; i < cantidad; ++i)
        arch << arr[i].nombre << "\n" << arr[i].DNI << "\n"
             << arr[i].edad << "\n" << arr[i].sexo << "\n"
             << arr[i].gravedad << "\n";
}

//Carga los pacientes desde el archivo de texto
void cargarPacientes() {
    ifstream archivo("pacientes.txt");
    if (!archivo) return; // Si no existe, no hay nada que cargar

    archivo >> contGeneral >> contUCIN >> contUCI;
    archivo.ignore(); // para evitar que quede un salto de línea pendiente

    for (int i = 0; i < contGeneral; i++) {
        getline(archivo, camaGeneral[i].nombre);
        archivo >> camaGeneral[i].DNI;
        archivo >> camaGeneral[i].edad;
        archivo >> camaGeneral[i].sexo;
        archivo >> camaGeneral[i].gravedad;
        archivo.ignore();
    }

    for (int i = 0; i < contUCIN; i++) {
        getline(archivo, camaUCIN[i].nombre);
        archivo >> camaUCIN[i].DNI;
        archivo >> camaUCIN[i].edad;
        archivo >> camaUCIN[i].sexo;
        archivo >> camaUCIN[i].gravedad;
        archivo.ignore();
    }

    for (int i = 0; i < contUCI; i++) {
        getline(archivo, camaUCI[i].nombre);
        archivo >> camaUCI[i].DNI;
        archivo >> camaUCI[i].edad;
        archivo >> camaUCI[i].sexo;
        archivo >> camaUCI[i].gravedad;
        archivo.ignore();
    }

    archivo.close();
}

// Eliminar un paciente por su DNI 
void borrarPaciente() {
    system("cls");
    gotoxy(35,5); cout << "Ingrese el DNI del paciente a eliminar: ";
    int dni;
    cin >> dni;

    bool eliminado = borrarDe(camaGeneral, contGeneral, dni)
              || borrarDe(camaUCIN, contUCIN, dni)
              || borrarDe(camaUCI, contUCI, dni);

    if (eliminado) {
        gotoxy(35,7); cout << "Paciente eliminado correctamente.";
        guardarPacientes(); // actualiza el archivo
    } else {
        gotoxy(35,7); cout << "No se encontro ningun paciente con ese DNI.";
    }

    getch();
}

bool borrarDe(paciente* arr, int &cont, int dni) {
    for (int i = 0; i < cont; i++) {
        if (arr[i].DNI == dni) {
            for (int j = i; j < cont - 1; j++)
                arr[j] = arr[j + 1];
            cont--;
            return true;
        }
    }
    return false;
}

void gotoxy(int x,int y) {
    HANDLE hcon;  
    hcon = GetStdHandle(STD_OUTPUT_HANDLE);  
    COORD dwPos;  
    dwPos.X = x;  
    dwPos.Y= y;  
    SetConsoleCursorPosition(hcon,dwPos);
}    


void mostrarCursor(bool visible) {
    HANDLE hCon = GetStdHandle(STD_OUTPUT_HANDLE); 
    CONSOLE_CURSOR_INFO cci;                        
    GetConsoleCursorInfo(hCon, &cci);              
    cci.bVisible = visible;                         
    SetConsoleCursorInfo(hCon, &cci);              
}

int leerEntero(const string& mensaje, int min, int max, int colu, int fila) {
    int valor;
    while (true) {
        gotoxy(colu,fila); cout << mensaje;
        if (cin >> valor) {
            if (valor >= min && valor <= max) return valor;
        }
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        gotoxy(colu,fila);cout<<"                                                    ";//se necesita antes y despues
        gotoxy(colu,fila);cout << "Valor invalido. Intenta de nuevo.\n";
        getch();
        gotoxy(colu,fila);cout<<"                                                    ";//esto es para limpiar la linea
    }
}
